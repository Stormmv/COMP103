#BlueJ class context
comment0.target=DecisionTree
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\r\n\ Setup\ the\ GUI\ and\ make\ a\ sample\ tree\r\n
comment10.params=lines
comment10.target=DTNode\ loadSubTree(java.util.Queue)
comment10.text=\r\n\ Loads\ a\ tree\ (or\ subtree)\ from\ a\ Scanner\ and\ returns\ the\ root.\r\n\ The\ first\ line\ has\ the\ text\ for\ the\ root\ node\ of\ the\ tree\ (or\ subtree)\r\n\ It\ should\ make\ the\ node,\ and\r\n\ if\ the\ first\ line\ starts\ with\ "Question\:",\ it\ loads\ two\ subtrees\ (yes,\ and\r\n\ no)\r\n\ from\ the\ scanner\ and\ add\ them\ as\ the\ children\ of\ the\ node,\r\n\ Finally,\ it\ should\ return\ the\ node.\r\n
comment2.params=
comment2.target=void\ setupGUI()
comment2.text=\r\n\ Set\ up\ the\ interface\r\n
comment3.params=node\ prefix\ tabs
comment3.target=void\ printTree(DTNode,\ java.lang.String,\ java.lang.String)
comment3.text=\r\n\ Print\ out\ the\ contents\ of\ the\ decision\ tree\ in\ the\ text\ pane.\r\n\ The\ root\ node\ should\ be\ at\ the\ top,\ followed\ by\ its\ "yes"\ subtree,\r\n\ and\ then\ its\ "no"\ subtree.\r\n\ Needs\ a\ recursive\ "helper\ method"\ which\ is\ passed\ a\ node.\r\n\ \r\n\ COMPLETION\:\r\n\ Each\ node\ should\ be\ indented\ by\ how\ deep\ it\ is\ in\ the\ tree.\r\n\ The\ recursive\ "helper\ method"\ is\ passed\ a\ node\ and\ an\ indentation\ string.\r\n\ (The\ indentation\ string\ will\ be\ a\ string\ of\ space\ characters)\r\n
comment4.params=node\ x\ y\ level
comment4.target=void\ drawTree(DTNode,\ int,\ int,\ int)
comment5.params=
comment5.target=void\ runTree()
comment5.text=\r\n\ Run\ the\ tree\ by\ starting\ at\ the\ top\ (of\ theTree),\ and\ working\r\n\ down\ the\ tree\ until\ it\ gets\ to\ a\ leaf\ node\ (a\ node\ with\ no\ children)\r\n\ If\ the\ node\ is\ a\ leaf\ it\ prints\ the\ answer\ in\ the\ node\r\n\ If\ the\ node\ is\ not\ a\ leaf\ node,\ then\ it\ asks\ the\ question\ in\ the\ node,\r\n\ and\ depending\ on\ the\ answer,\ goes\ to\ the\ "yes"\ child\ or\ the\ "no"\ child.\r\n
comment6.params=
comment6.target=void\ growTree()
comment6.text=\r\n\ Grow\ the\ tree\ by\ allowing\ the\ user\ to\ extend\ the\ tree.\r\n\ Like\ runTree,\ it\ starts\ at\ the\ top\ (of\ theTree),\ and\ works\ its\ way\ down\ the\r\n\ tree\r\n\ until\ it\ finally\ gets\ to\ a\ leaf\ node.\r\n\ If\ the\ current\ node\ has\ a\ question,\ then\ it\ asks\ the\ question\ in\ the\ node,\r\n\ and\ depending\ on\ the\ answer,\ goes\ to\ the\ "yes"\ child\ or\ the\ "no"\ child.\r\n\ If\ the\ current\ node\ is\ a\ leaf\ it\ prints\ the\ decision,\ and\ asks\ if\ it\ is\r\n\ right.\r\n\ If\ it\ was\ wrong,\ it\r\n\ -\ asks\ the\ user\ what\ the\ decision\ should\ have\ been,\r\n\ -\ asks\ for\ a\ question\ to\ distinguish\ the\ right\ decision\ from\ the\ wrong\ one\r\n\ -\ changes\ the\ text\ in\ the\ node\ to\ be\ the\ question\r\n\ -\ adds\ two\ new\ children\ (leaf\ nodes)\ to\ the\ node\ with\ the\ two\ decisions.\r\n
comment7.params=filename
comment7.target=void\ loadTree(java.lang.String)
comment7.text=\r\n\ Loads\ a\ decision\ tree\ from\ a\ file.\r\n\ Each\ line\ starts\ with\ either\ "Question\:"\ or\ "Answer\:"\ and\ is\ followed\ by\ the\r\n\ text\r\n\ Calls\ a\ recursive\ method\ to\ load\ the\ tree\ and\ return\ the\ root\ node,\r\n\ and\ assigns\ this\ node\ to\ theTree.\r\n
comment8.params=filename
comment8.target=void\ saveTree(java.lang.String)
comment9.params=node\ pw
comment9.target=void\ saveSubTree(DTNode,\ java.io.PrintWriter)
numComments=11
